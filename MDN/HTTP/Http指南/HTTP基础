HTTP 是一个拓展性非常好的协议。它依赖于资源或统一资源定位符（URI）的概念、一个简单的消息结构和一个客户端——服务器结构的通信流。
在这些基础概念之上，近年来已经出现了许多拓展，以增加新的 HTTP 方法或首部的方式为 HTTP 协议增加了新的功能和语义。

HTTP 是一种能够获取如 HTML 这样的网络资源的 protocol(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，
也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的 Web 文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。
客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。由像浏览器这样的客户端发出的消息叫做请求（request），被服务端响应的消息叫做响应（response）。


缓存文档如何缓存能通过 HTTP 来控制。服务端能告诉代理和客户端哪些文档需要被缓存，缓存多久，而客户端也能够命令中间的缓存代理来忽略存储的文档。
开放同源限制 为了防止网络窥听和其他隐私泄漏，浏览器强制对 Web 网站做了分割限制。只有来自于相同来源的网页才能够获取网站的全部信息。
这样的限制有时反而成了负担，HTTP 可以通过修改标头来开放这样的限制，因此 Web 文档可以是由不同域下的信息拼接成的（某些情况下，这样做还有安全因素考虑）。
认证 一些页面能够被保护起来，仅让特定的用户进行访问。基本的认证功能可以直接通过 HTTP 提供，使用 Authenticate 相似的标头即可，或用 HTTP Cookies 来设置指定的会话。
代理和隧道 通常情况下，服务器和/或客户端是处于内网的，对外网隐藏真实 IP 地址。因此 HTTP 请求就要通过代理越过这个网络屏障。
但并非所有的代理都是 HTTP 代理。例如，SOCKS 协议的代理就运作在更底层，一些像 FTP 这样的协议也能够被它们处理。
会话 使用 HTTP Cookie 允许你用一个服务端的状态发起请求，这就创建了会话。虽然基本的 HTTP 是无状态协议。
这很有用，不仅是因为这能应用到像购物车这样的电商业务上，更是因为这使得任何网站都能轻松为用户定制展示内容了。


HTTP是应用层的协议，通过 TCP，或者是 TLS——加密的 TCP 连接来发送，理论上任何可靠的传输协议都可以使用。
因为其良好的扩展性，时至今日，它不仅被用来传输超文本文档，还用来传输图片、视频或者向服务器发送如 HTML 表单这样的信息。
HTTP 还可以根据网页需求，仅获取部分 Web 文档内容更新网页。

TCP
传输控制协议 (TCP) 是主要的网络协议之一。它使两台主机能够建立连接并交换数据流。TCP 能保证数据的交付，维持数据包的发送顺序。

TLS
传输层安全性协议 (Transport Layer Security，缩写作 TLS)，它的前身是安全套接层 (Secure Sockets Layer，缩写作 SSL)，
是一个被应用程序用来在网络中安全通信的 protocol （通讯协议），防止电子邮件、网页、消息以及其他协议被篡改或是窃听。


HTTP 流
当客户端想要和服务端进行信息交互时（服务端是指最终服务器，或者是一个中间代理），过程表现为下面几步：
1.打开一个 TCP 连接：TCP 连接被用来发送一条或多条请求，以及接受响应消息。客户端可能打开一条新的连接，或重用一个已经存在的连接，或者也可能开几个新的 TCP 连接连向服务端。

2.发送一个 HTTP 报文：HTTP 报文（在 HTTP/2 之前）是语义可读的。在 HTTP/2 中，这些简单的消息被封装在了帧中，这使得报文不能被直接读取，但是原理仍是相同的。
GET / HTTP/1.1
Host: developer.mozilla.org
Accept-Language: fr
Copy to Clipboard

3.读取服务端返回的报文信息：
HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: "51142bc1-7449-479b075b2891b"
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html
<!DOCTYPE html... (here comes the 29769 bytes of the requested web page)

4.关闭连接或者为后续请求重用连接。


基于 HTTP 的组件系统
HTTP 是一个 client-server 协议：请求通过一个实体被发出，实体也就是用户代理。
大多数情况下，这个用户代理都是指浏览器，当然它也可能是任何东西，比如一个爬取网页生成维护搜索引擎索引的机器爬虫。
每一个发送到服务器的请求，都会被服务器处理并返回一个消息，也就是response。
在这个请求与响应之间，还有许许多多的被称为代理的实体，他们的作用与表现各不相同，比如有些是网关，还有些是 cache 等。
实际上，在一个浏览器和处理请求的服务器之间，还有路由器、调制解调器等许多计算机。由于 Web 的层次设计，那些在网络层和传输层的细节都被隐藏起来了。
HTTP 位于最上层的应用层。虽然底层对于分析网络问题非常重要，但是大多都跟对 HTTP 的描述不相干。


客户端：user-agent
user-agent 就是任何能够为用户发起行为的工具。这个角色通常都是由浏览器来扮演。一些例外情况，比如是工程师使用的程序，以及 Web 开发人员调试应用程序。
浏览器总是作为发起一个请求的实体，他永远不是服务器（虽然近几年已经出现一些机制能够模拟由服务器发起的请求消息了）。
要展现一个网页，浏览器首先发送一个请求来获取页面的 HTML 文档，再解析文档中的资源信息发送其他请求，
获取可执行脚本或 CSS 样式来进行页面布局渲染，以及一些其他页面资源（如图片和视频等）。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。
浏览器执行的脚本可以在之后的阶段获取更多资源，并相应地更新网页。
一个网页就是一个超文本文档。也就是说，有一部分显示的文本可能是链接，启动它（通常是鼠标的点击）就可以获取一个新的网页，使得用户可以控制客户端进行网上冲浪。
浏览器来负责发送 HTTP 请求，并进一步解析 HTTP 返回的消息，以向用户提供明确的响应。


Web 服务端
在上述通信过程的另一端，是由 Web Server 来服务并提供客户端所请求的文档。
Server 只是虚拟意义上代表一个机器：它可以是共享负载（负载均衡）的一组服务器组成的计算机集群，
也可以是一种复杂的软件，通过向其他计算机（如缓存，数据库服务器，电子商务服务器 ...）发起请求来获取部分或全部资源。
Server 不一定是一台机器，但一个机器上可以装载的众多 Servers。在 HTTP/1.1 和 Host 标头中，它们甚至可以共享同一个 IP 地址。


代理（Proxy）
在浏览器和服务器之间，有许多计算机和其他设备转发了 HTTP 消息。由于 Web 栈层次结构的原因，它们大多都出现在传输层、网络层和物理层上，
对于 HTTP 应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为代理（Proxy）。
代理既可以表现得透明，又可以不透明（“改变请求”会通过它们）。代理主要有如下几种作用：
缓存（可以是公开的也可以是私有的，像浏览器的缓存）
过滤（像反病毒扫描，家长控制...）
负载均衡（让多个服务器服务不同的请求）
认证（对不同资源进行权限管理）
日志记录（允许存储历史信息）


请求
请求由以下元素组成：
1.一个 HTTP 的请求方法，经常是由一个动词像 GET、POST 或者一个名词像 OPTIONS、HEAD 来定义客户端的动作行为。
通常客户端的操作都是获取资源（GET 方法）或者发送 HTML 表单（POST 方法），虽然在一些情况下也会有其他操作。
2.要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 protocol（http://），domain（developer.mozilla.org），或是 TCP 的 port (en-US)（HTTP 一般在 80 端口）。
3.HTTP 协议版本号。
4.为服务端表达其他信息的可选标头。
5.对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。


响应
响应报文包含了下面的元素：
1.HTTP 协议版本号。
2.一个状态码（状态码（status code）），来告知对应请求执行成功或失败，以及失败的原因。
3.一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。
4.HTTP 标头，与请求标头类似。
5.可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。


