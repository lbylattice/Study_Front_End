使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 
Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 
Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。

Git 保存的是一系列不同时刻的快照。在进行提交操作时,Git会保存一个提交对象(commit object).
该提交对象会包含一个指向暂存内容快照的指针.该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针.
首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象， 而由多个分支合并产生的提交对象有多个父对象，

为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 
暂存操作会为每一个文件计算校验和（使用我们在 起步 中提到的 SHA-1 哈希算法），
然后会把当前版本的文件快照保存到 Git 仓库中(Git 使用 blob 对象来保存它们)，最终将校验和加入到暂存区域等待提交：
当使用 git commit 进行提交操作时,Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中将这些校验和保存为树对象。
随后,Git便会创建一个提交对象,它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 
如此一来,Git 就可以在需要的时候重现此次保存的快照。

Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 
在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支会在每次提交时自动向前移动。