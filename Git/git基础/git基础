你工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。
已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。
工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。 
初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们。
编辑过某些文件之后,由于自上次提交后你对它们做了修改,Git 将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改.



检查当前文件状态可以用 (git status) 命令
可以看当前的分支 新文件(包括未跟踪状态的文件和跟踪状态的文件)

(git status -s)  or (git status --short)
简化版 输出文件(包括未跟踪状态的文件和跟踪状态的文件)
新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。



跟踪新文件  命令 (git add 文件或目录的路径)
这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”。变成已暂存状态（存在暂存区）



忽略文件 .gitignore文件
见外部 .gitignore文件



查看差异  命令 (git diff)
1.首先你得有修改的文件a在暂存区
2.在文件a上继续修改但不跟踪文件a
3.使用git diff比较差异

命令 (git diff --staged)    比较暂存区的文件与最后一次提交文件的差异



提交更新  命令 (git commit -m "注释")  只提交暂存区的文件，已修改但未暂存的文件只会保留在本地磁盘

跳过使用暂存区域  命令 (git commit -a "注释")  Git会自动把所有已经跟踪过的文件暂存起来一并提交,从而跳过 git add 步骤

重新提交更新  命令 (git commit --amend)
第二次提交将代替第一次提交的结果
例：
git commit -m 'initial commit'
git add forgotten_file
git commit --amend



从暂存区移除文件  命令(git rm 文件名)



移动文件  命令(git mv file_a file_b)
实际运行命令
1.git rm file_a
2.git add file_b



取消提交的某个文件 命令 (git reset HEAD <file>)